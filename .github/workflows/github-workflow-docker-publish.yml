# This is a basic workflow to help you get started with Actions

name: 持续集成CI

# Controls when the action will run.
on:
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]
  workflow_dispatch:
    inputs:
      what_to_do:
        type: choice
        description: Choose what to do
        options:
        - build_and_push_image
        - create_image_snapshot
      target_docker_image:
        description: |
          Target docker image:
          - image to save (create_image_snapshot, e.g. python:3.10)
          - feature name (build_and_push_image, e.g. node12-ci)
        required: true
      target_docker_file:
        description: Dockerfile (build_and_push_image)
      # upload-artifact:
      #   type: boolean
      # environment:
      #   type: environment

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Job-Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Environment variables declared for use
    env:
      ENV_CI_WHAT_TO_DO: "${{ github.event.inputs.what_to_do }}"
      ENV_CI_TARGET_DOCKER_IMAGE: "${{ github.event.inputs.target_docker_image }}"
      ENV_CI_DIST_DIR: "dist-artifact"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: 显示基本信息 Output basic info
      run: |
        echo "当前 Build ID (env.GITHUB_RUN_ID): ${GITHUB_RUN_ID}"
        echo "当前 Build Number (env.GITHUB_RUN_NUMBER): ${GITHUB_RUN_NUMBER}"
        echo "当前 Workspace (env.GITHUB_WORKSPACE): ${GITHUB_WORKSPACE}"
        echo "当前工作目录 (env.PWD): ${PWD}"
        echo "当前产出目录 (env.ENV_CI_DIST_DIR): ${ENV_CI_DIST_DIR}"
        echo "当前 inputs.what_to_do: ${ENV_CI_WHAT_TO_DO}"
        echo "当前 inputs.target_docker_image: ${ENV_CI_TARGET_DOCKER_IMAGE}"
        # Remove software and language runtimes we're not using https://github.com/actions/runner-images/issues/2840#issuecomment-2272410832
        sudo rm -rf \
          "$AGENT_TOOLSDIRECTORY" \
          /opt/google/chrome \
          /opt/microsoft/msedge \
          /opt/microsoft/powershell \
          /opt/pipx \
          /usr/lib/mono \
          /usr/local/julia* \
          /usr/local/lib/android \
          /usr/local/lib/node_modules \
          /usr/local/share/chromium \
          /usr/local/share/powershell \
          /usr/share/dotnet \
          /usr/share/swift
        df -h /

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: 代码获取 Checkout code
      uses: actions/checkout@v4
      with:
        repository: "${{ github.repository }}"

    # Runs a set of commands using the runners shell
    - name: 准备脚本环境 Init running environment
      run: |
        mkdir -p "${ENV_CI_DIST_DIR}"

    # Runs a set of commands using the runners shell
    - name: 运行执行脚本 Run a multi-line script - create_image_snapshot
      if: ${{ github.event.inputs.what_to_do == 'create_image_snapshot' }}
      run: |
        export ENV_CI_TARGET_DOCKER_IMAGE_SAVENAME="dockerimg_$(echo "${ENV_CI_TARGET_DOCKER_IMAGE}" | sed -e 's/\//~/g' -e 's/:/@/g')_$(date +'%Y-%m-%dT%H-%M-%S%z')"
        docker pull "${ENV_CI_TARGET_DOCKER_IMAGE}"
        docker save "${ENV_CI_TARGET_DOCKER_IMAGE}" | gzip > "${ENV_CI_DIST_DIR}/${ENV_CI_TARGET_DOCKER_IMAGE_SAVENAME}.tar.gz"
        ls -la "${ENV_CI_DIST_DIR}"

    # Runs a set of commands using the runners shell
    - name: 运行执行脚本 Run a multi-line script - build_and_push_image
      if: ${{ github.event.inputs.what_to_do == 'build_and_push_image' }}
      run: |
        export ENV_CI_DOCKERIMAGE_THISTAG="${GITHUB_RUN_NUMBER}"
        ./run-docker-build-publish.sh
      env:
        ENV_CI_DOCKER_USERNAME: "${{ github.actor }}"
        ENV_CI_DOCKER_TOKEN: "${{ secrets.DOCKERHUB_TOKEN }}"
        ENV_CI_DOCKERIMAGE_FEATURENAME: "${{ env.ENV_CI_TARGET_DOCKER_IMAGE }}"
        ENV_CI_DOCKERIMAGE_REPOURL: ""
        ENV_CI_DOCKERIMAGE_REPOYML: ""

    # Upload artifacts
    - name: 上传产出包 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-artifact
        path: "${{ github.workspace }}/${{ env.ENV_CI_DIST_DIR }}"
